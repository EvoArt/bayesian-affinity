---
engine: julia
---

```{julia}
using  CSV,DataFrames, GLMakie, Clustering,CairoMakie,GraphMakie,Colors
using Turing,LinearAlgebra, Graphs,Colors,GraphMakie,Chain, DelimitedFiles, GraphMakie.NetworkLayout
GLMakie.activate!()
include("plot_themes.jl")
include("utils.jl")
set_theme!(basic_theme);
```

# Load and process data

## Microbes
```{julia}
confidence = readdlm("results/publication_conf.csv")
affinity_estimates = readdlm("results/publication_est.csv")
neg_g,pos_g,both_g,conf_neg,conf_pos,conf_both,est_neg,est_pos,est_both = make_graphs(confidence,affinity_estimates,0.05)
graphs = [neg_g,pos_g]
taxa = CSV.read("fibrosis_taxa.csv",DataFrame)
taxa = taxa[completecases(taxa),:]
df = CSV.read("fibrosis_Genus_PA.csv",DataFrame)[:,3:end]
gens = [split(name,"_genus_")[2] for name in DataFrames.names(df)]
phyla = taxa.Phylum[[findfirst(x-> x== gen, taxa.Genus) for gen in gens]]
PA = Array(df)
n_sample, n_obs = size(PA)
clrs = distinguishable_colors(length(unique(phyla)))
clr_dict = Dict(unique(phyla) .=> clrs)
```

## Ants

```{julia}
ants_genus_chn = CSV.read(["results/ants_genus_chn_$i.csv" for i in 1:8],DataFrame)
ants_hier_chn = CSV.read(["results/ants_species_hier_chn_$i.csv" for i in 1:8],DataFrame)
ants_pool_chn = CSV.read(["results/ants_species_pool_chn_$i.csv" for i in 1:8],DataFrame)

ant_local_chn =CSV.read("results/ant_local_chn.csv", DataFrame)
ant_global_chn =CSV.read("results/ant_global_chn.csv", DataFrame)
```

## Beetles

```{julia}
beetle_gower_chn =CSV.read("results/beetle_gower_chn.csv", DataFrame)
beetle_interaction_chn =CSV.read("results/beetle_interaction_chn.csv", DataFrame)
beetle_size_chn =CSV.read("results/beetle_size_within_chn.csv", DataFrame)
```

# Make figures

## Beetles

```{julia}
n_sample= size(beetle_gower_chn,1)
beetle_fig = Figure()
ax = Axis(beetle_fig[1,1],yticks = (1:3,["Size within\nfunctional guild","Biomass and\nfunctional guild","Gower's distance"]),ylabel = "Model",xlabel = "Effect of trait dissimilarity on affinity")
vlines!(ax,[0.0], color = :black, linestyle = :dash)
violin!(ax,fill(3,n_sample),beetle_gower_chn.β,orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9), color = (c4,0.7),label = "Gower's distance")

violin!(ax,fill(1,n_sample),beetle_size_chn.β,orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9), color = (c2,0.9))

violin!(ax,fill(2,n_sample),beetle_interaction_chn[:,"β[1]"],orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9),side = :right, color = (c2,0.9),label = "Biomass")
violin!(ax,fill(2,n_sample),beetle_interaction_chn[:,"β[2]"],orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9),side = :left, color = (c3,0.9),label = "Functional guild")
violin!(ax,fill(2,n_sample),beetle_interaction_chn[:,"β[3]"],orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9), color = (c1,0.9),label = "Interaction: biomass X functional guild")

Legend(beetle_fig[1, 1],
       [MarkerElement(color = c, marker = :rect, markersize = 15) for c in cmap[[4,2,3,1]]],
       ["Gower's distance","Biomass","Functional guild","Interaction: biomass X functional guild"],
       "Regression coefficients",
       tellheight = false,
        tellwidth = false,
        margin = (10, 10, 10, 10),
        halign = :right, 
        valign = :bottom)
beetle_fig
```

## Ants

```{julia}
ant_traits = ["Body size", "Leg length", "Head width", "Mandible length","Pronotum width","Scape length"]
n_trait = length(ant_traits)
n_sample = size(ant_local_chn,1)
ant_fig = Figure()
ax = Axis(ant_fig[1,1],yticks = (1:n_trait,ant_traits),ylabel = "Trait",xlabel = "Effect of trait dissimilarity on affinity")
vlines!(ax,[0.0], color = :black, linestyle = :dash)

for i in 1:n_trait
    violin!(ax,fill(i,n_sample),ant_global_chn[:,"β[$(i)]"],orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9), color = (c1,0.9),side = :right,label = "Global")
      violin!(ax,fill(i,n_sample),ant_local_chn[:,"β[$(i)]"],orientation = :horizontal,strokewidth = 2, strokecolor = (:black,0.9), color = (c2,0.9),side = :left,label = "Local")
      end
    Legend(ant_fig[1, 1],
       [MarkerElement(color = c, marker = :rect, markersize = 15) for c in cmap[[2,1]]],
       ["Local","Global"],
       "Occurrence data",
       tellheight = false,
        tellwidth = false,
        margin = (10, 10, 10, 10),
        halign = :left, 
        valign = :bottom)

n_sample = size(ants_genus_chn,1)
ax2 = Axis(ant_fig[1,2],ylabel = "phylogenetic scale",yticks = ([1,1.5],["Species","Genus"]),xlabel = "Effect of phylogenetic distance on affinity",xticks = -0.15:0.05:0.2)
vlines!(ax2,[0.0], color = :black, linestyle = :dash)

  violin!(ax2,fill(1.5,n_sample),ants_genus_chn.β,scale =:count,orientation = :horizontal, color = (c1,0.9),strokewidth = 2, strokecolor = (:black,0.9))
 violin!(ax2,fill(1,n_sample),ants_hier_chn.mu,scale =:count,orientation = :horizontal, color = (c2,0.9),side = :right,strokewidth = 2, strokecolor = (:black,0.9))
  violin!(ax2,fill(1,n_sample),ants_pool_chn.β,scale =:count,orientation = :horizontal, color = (c3,0.9),side = :left,strokewidth = 2, strokecolor = (:black,0.9))
 ax.title = "a) Ant traits"
 ax2.title = "b) Ant phylogeny"
 ax2.yaxisposition =:right

     Legend(ant_fig[1, 2],
       [MarkerElement(color = c, marker = :rect, markersize = 15) for c in cmap[[2,3]]],
       ["Hierarchical","Pooled"],
       "Model",
       tellheight = false,
        tellwidth = false,
        margin = (10, 10, 10, 10),
        halign = :right, 
        valign = :top)
ant_fig
```

## Microbes

```{julia}
# Chop down to 50 genera for visualisation
X = affinity_estimates[1:50,1:50]
# Order data by hierarchical clustering
D = 1 .-Turing.logistic.(X)
D[(D .==0.5) .| isnan.(D)] .=0

hc = hclust(D).order
X = X[hc,hc]
Y = confidence[1:50,1:50][hc,hc]
# Make vectors of plotting coordinates, affinity estimates and confidence
marker_c,marker_s,x,y = [],[],[],[]
for i in 1:50
    for j in 1:50
        if i != j 
            conf = max(Y[i,j],1-Y[i,j])
            push!(x,j)
            push!(y,i)
            push!(marker_c,X[i,j])
            push!(marker_s,conf)
        end
    end
end
# Plot the data
adjacency_fig = Figure()
a = Axis(adjacency_fig[1:2,1])
sc =scatter!(a,x,reverse(y),markersize=10marker_s,color=float.(marker_c),colormap=:bam,
colorrange=(-maximum(abs.(marker_c)),maximum(abs.(marker_c))))
a.xticklabelrotation = π/2
a.xticklabelsize= 10
a.yticklabelsize= 10
a.xticks = (1:50,gens[1:50][hc])
a.yticks = (1:50,gens[1:50][reverse(hc)])
Colorbar(adjacency_fig[1,2],sc, vertical = true,
label = "Affinity",halign=:left)

markersizes =  [5,7.5,10]
group_size = [MarkerElement(marker = :circle, color = :black,
    strokecolor = :transparent,
    markersize = ms) for ms in markersizes]
    Legend(adjacency_fig[2,2],
    [MarkerElement(marker = :circle, color = :black, markersize = ms) for ms in markersizes],
    ["50","75",">99"],
    "Confidence", tellheight = true) 
adjacency_fig
```


```{julia}
network_fig = Figure()
LO = SFDP(C=0.25,K=0.85)
for i in 1:2
    j =[1,2:3][i]
    g = graphs[i]
    conf = [conf_neg,conf_pos][i]
    estimate = abs.([est_neg,est_pos][i])
    pruned_g,clr =  plot_prep(g,phyla,alpha = 0.4)
    neg_pos = iseven(i) ? "b) Positive affinity" : "a) Negative affinity"
    ax = Axis(network_fig[1,j], title =neg_pos ,
    backgroundcolor = bg,)
    ax.topspinevisible = false
    ax.bottomspinevisible = false
    ax.leftspinevisible = false
    ax.rightspinevisible = false
    hidedecorations!(ax)
    ew = conf .- minimum(conf_both) 
    ew ./= maximum(ew)
    ew .+= 0.1
    ew .*=3
    positions = LO(adjacency_matrix(pruned_g))
    graphplot!(ax,pruned_g,layout = LO,curve_distance=0.1, curve_distance_usage=true,             
                edge_plottype=:beziersegments, edge_color = estimate,
                node_size = 6 .+ degree(pruned_g) ,
                node_color= clr,node_strokewidth =2,
                edge_width= ew,
                edge_attr = (colorrange=(minimum(abs.(est_both)),maximum(abs.(est_both))),
                        colormap=:viridis,alpha=0.7))
    graphplot!(ax,pruned_g,layout = LO,
                node_size =6 .+ degree(pruned_g),
                node_color= clr,
                edge_color=:transparent)
    if i ==2
        ax_inset = Axis(network_fig[1, 3],
        limits =(-2.5,1.5,-2.5,3),
        width=Relative(0.5),
        height=Relative(0.4),
        halign=1.0,
        valign=0.0,
        spinewidth =2)
        inset_est = copy(estimate)
        e_alpha = zeros(ne(pruned_g))
        for (ind,e) in enumerate(edges(pruned_g))
            if ((-2.5<positions[e.src][1]<1.5) & (-2.5<positions[e.src][2]<3)) & ((-2.5<positions[e.dst][1]<1.5) & (-2.5<positions[e.dst][2]<3))
                e_alpha[ind] =0.7
            end
        end
        translate!(ax_inset.blockscene, 0, 0, 150)
        graphplot!(ax_inset,pruned_g,layout = LO,curve_distance=0.1, curve_distance_usage=true,             
                    edge_plottype=:beziersegments, edge_color = estimate,
                    node_size = 8 .+degree(pruned_g) ./5,
                    node_color= clr,node_strokewidth =2,
                    edge_width= ew ./2,
                    edge_attr = (colorrange=(minimum(abs.(est_both)),maximum(abs.(est_both))),
                            colormap=:viridis,alpha=e_alpha))
        graphplot!(ax_inset,pruned_g,layout = LO,
                    node_size = 8 .+degree(pruned_g) ./5,
                    node_color= clr,
                    edge_color=:transparent)
                    hidedecorations!(ax_inset)
                    border_rect = Rect2(-2.5, -2.5, 4.0,5.5)
        lines!(ax, border_rect, color=:black, linewidth=2)
    end
end

markersizes = [7, 11, 16, 26] 
linewidths = [0.3,1.5,3]
colors = [:red, :green, :blue, :orange]

group_nodes = [MarkerElement(marker = :circle, color = (:red, 0.4),
    strokecolor = :black,strokewidth=2,
    markersize = ms) for ms in markersizes]

group_edges = [LineElement(color = :black,
    strokecolor = :black,
    linewidth = lw) for lw in linewidths]
Colorbar(network_fig[1,4], limits = (minimum(abs.(est_both)),maximum(abs.(est_both))),ticks = -5:5, colormap = :viridis,vertical = true,
label = "Affinity (absolute value)")

Legend(network_fig[2,1:4],
    [group_nodes, group_edges,[MarkerElement(color = c, marker = :circle, markersize = 15) for c in clrs]],
    [string.(markersizes .-6), string.([minimum(conf_both),mean([minimum(conf_both),1]),">0.99"]),unique(phyla)],
    ["Degree", "Confidence","Phylum"], tellwidth = false, tellheight = true,
    orientation = :horizontal, nbanks = 3) 
network_fig
```

